{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Website! About Me My name is Max Bechtold, and I am a sophomore at the University of Minnesota. I am pursuing two degrees: A BS in Technical Writing and Communication and a BA in Philosophy. I also hope to pursue minors in German and Computer Science, as I take classes in these areas as well. I work at Rustica Bakery in Minneapolis and I will be working at the UMN Center for Writing next fall. In my free time I enjoy reading, taking long walks, and working on campaigns for my favorite game: Dungeons & Dragons! My Story I grew up in St. Louis Park, a town right outside of Minneapolis. I have always been interested in writing, so I naturally joined the TWC program when I came to UMN.","title":"Home"},{"location":"#welcome-to-my-website","text":"","title":"Welcome to my Website!"},{"location":"#about-me","text":"My name is Max Bechtold, and I am a sophomore at the University of Minnesota. I am pursuing two degrees: A BS in Technical Writing and Communication and a BA in Philosophy. I also hope to pursue minors in German and Computer Science, as I take classes in these areas as well. I work at Rustica Bakery in Minneapolis and I will be working at the UMN Center for Writing next fall. In my free time I enjoy reading, taking long walks, and working on campaigns for my favorite game: Dungeons & Dragons!","title":"About Me"},{"location":"#my-story","text":"I grew up in St. Louis Park, a town right outside of Minneapolis. I have always been interested in writing, so I naturally joined the TWC program when I came to UMN.","title":"My Story"},{"location":"deliv1/","text":"My Projects Throughout my college career, I've created and worked on many difficult tasks. Many of these projects involved combining technical skills with complex theories. While most of what I feature here relates to school, I had a lot of fun with most of these and enjoyed using my creative liberty with them! Static Site v1 The Static Site v1 was the first website I have ever created outside of a Content Management System (CMS). It is hand-coded HTML and CSS, which means that it does look like something out of the 1990's. However, this assignment taught me a lot. It was fun to learn about HTML and CSS, and it helped to have some previous coding experience. The most important part about the Static Site v1 is that it was my first \"portfolio site\", so a lot of content on this website takes inspiration from the Static Site project! Here is the link to my static site: Static Site v1 . Structured Authoring with DITA The second website-related project I worked on was the structured authoring using DITA. I did not directly code a website in this project; rather, I used the Oxygen software to organize DITA files and transform them into various forms of documentation. I sought to make some documentation about creating a D&D character, with the idea that it would be part of a larger documentation, such as a player handbook or other tutorial-related material. After I made the separate DITA files and added content to them, I could use Oxygen to transform the DITA files into multiple forms. One of these forms was a website, and the other was a PDF. Here is a link to my DITA website: DITA website .","title":"My Projects"},{"location":"deliv1/#my-projects","text":"Throughout my college career, I've created and worked on many difficult tasks. Many of these projects involved combining technical skills with complex theories. While most of what I feature here relates to school, I had a lot of fun with most of these and enjoyed using my creative liberty with them!","title":"My Projects"},{"location":"deliv1/#static-site-v1","text":"The Static Site v1 was the first website I have ever created outside of a Content Management System (CMS). It is hand-coded HTML and CSS, which means that it does look like something out of the 1990's. However, this assignment taught me a lot. It was fun to learn about HTML and CSS, and it helped to have some previous coding experience. The most important part about the Static Site v1 is that it was my first \"portfolio site\", so a lot of content on this website takes inspiration from the Static Site project! Here is the link to my static site: Static Site v1 .","title":"Static Site v1"},{"location":"deliv1/#structured-authoring-with-dita","text":"The second website-related project I worked on was the structured authoring using DITA. I did not directly code a website in this project; rather, I used the Oxygen software to organize DITA files and transform them into various forms of documentation. I sought to make some documentation about creating a D&D character, with the idea that it would be part of a larger documentation, such as a player handbook or other tutorial-related material. After I made the separate DITA files and added content to them, I could use Oxygen to transform the DITA files into multiple forms. One of these forms was a website, and the other was a PDF. Here is a link to my DITA website: DITA website .","title":"Structured Authoring with DITA"},{"location":"max/","text":"Website Documentation I built this website in WRIT 4662W using MkDocs and Markdown. With the help of my professor, Daniel Card, I got it fully functional and hosted on GitHub pages. Process Overview The most difficult part of making this website for me was setting up MkDocs and Python. While these are both open source and free, it took some work to make them fully functional. We used the MkDocs documentation to help us work through the process, and we also had to use the command line to build our MkDocs site. After setting up MkDocs, we could freely create and host websites, but only for brief periods of time. To fully host our websites, we had to use GitHub pages. We used the command line to build our MkDocs website, and then pushed the changes to GitHub and published them using GitHub pages. The end result was a hosted website that we could quickly modify on our computer and that was public to everyone. 1. Installing MkDocs and Python First, we installed Python. Python allowed us to use MkDocs to build a site, so having one but not the other was no help. To do this, we retrieved the latest version from the Python website . Next, we had to install pip. Using the command line, we simply entered: python get-pip.py After that, we installed mkdocs by entering: pip install mkdocs 2. Building the Website After getting the initial steps set up, we could start making Markdown files in our project and editing them. Of course, we had to organize these files so that MkDocs would use them when building the website. To do this, we made a large folder: my-mkdocs . This contained: A folder docs for Markdown files. A folder site for the build website. A file mkdocs.yml which contained the information for organizing the site. After editing the initial Markdown files like index.md and about.md , we could make our first build of the site. To build the website, we had to enter the command line interface once again. There were three steps to building the site. Enter cd desktop to go to the desktop files. Enter cd my-mkdocs to enter the MkDocs files. Enter mkdocs build to build the website, which is stored in the site folder. To view the website, there were three more steps to take. Enter mkdocs serve to host the website. Copy the link that the command line gives to you. Paste the link in a browser URL. This allowed us to temporarily view the website, but it would stop hosting as soon as we exited the command line. This meant that we had to use a more efficient way of hosting the website: GitHub Pages. 3. Using GitHub Pages Setting up GitHub Pages meant we could now freely host the website and make changes a lot more quickly and efficiently. We followed a few steps to link our website to GitHub Pages. Install GitHub desktop. Make a new local repository. Use the name \"site\" to link with our site file. Use the main and root branches. Keep the repository public. After creating the repository, we could now keep track of any changes we made by building the site folder. First, we had to host the site. We enterd GitHub broswer to publish the first commit of the website and keep it public. When we changed the folder by using mkdocs build in the command line, we could now follow a couple more steps to change the website. Enter GitHub desktop. Select the current project (site). Look over changes. Add a summary of changes. Select \"Commit to main\". Select \"Push to origin\". After doing these, we could now enter GitHub browser mode to view the latest deployment of the website. Overall, this was a very long process, but it was very rewarding to get to see our website hosted and successful after the long time it took to set up!","title":"Documentation"},{"location":"max/#website-documentation","text":"I built this website in WRIT 4662W using MkDocs and Markdown. With the help of my professor, Daniel Card, I got it fully functional and hosted on GitHub pages.","title":"Website Documentation"},{"location":"max/#process-overview","text":"The most difficult part of making this website for me was setting up MkDocs and Python. While these are both open source and free, it took some work to make them fully functional. We used the MkDocs documentation to help us work through the process, and we also had to use the command line to build our MkDocs site. After setting up MkDocs, we could freely create and host websites, but only for brief periods of time. To fully host our websites, we had to use GitHub pages. We used the command line to build our MkDocs website, and then pushed the changes to GitHub and published them using GitHub pages. The end result was a hosted website that we could quickly modify on our computer and that was public to everyone.","title":"Process Overview"},{"location":"max/#1-installing-mkdocs-and-python","text":"First, we installed Python. Python allowed us to use MkDocs to build a site, so having one but not the other was no help. To do this, we retrieved the latest version from the Python website . Next, we had to install pip. Using the command line, we simply entered: python get-pip.py After that, we installed mkdocs by entering: pip install mkdocs","title":"1. Installing MkDocs and Python"},{"location":"max/#2-building-the-website","text":"After getting the initial steps set up, we could start making Markdown files in our project and editing them. Of course, we had to organize these files so that MkDocs would use them when building the website. To do this, we made a large folder: my-mkdocs . This contained: A folder docs for Markdown files. A folder site for the build website. A file mkdocs.yml which contained the information for organizing the site. After editing the initial Markdown files like index.md and about.md , we could make our first build of the site. To build the website, we had to enter the command line interface once again. There were three steps to building the site. Enter cd desktop to go to the desktop files. Enter cd my-mkdocs to enter the MkDocs files. Enter mkdocs build to build the website, which is stored in the site folder. To view the website, there were three more steps to take. Enter mkdocs serve to host the website. Copy the link that the command line gives to you. Paste the link in a browser URL. This allowed us to temporarily view the website, but it would stop hosting as soon as we exited the command line. This meant that we had to use a more efficient way of hosting the website: GitHub Pages.","title":"2. Building the Website"},{"location":"max/#3-using-github-pages","text":"Setting up GitHub Pages meant we could now freely host the website and make changes a lot more quickly and efficiently. We followed a few steps to link our website to GitHub Pages. Install GitHub desktop. Make a new local repository. Use the name \"site\" to link with our site file. Use the main and root branches. Keep the repository public. After creating the repository, we could now keep track of any changes we made by building the site folder. First, we had to host the site. We enterd GitHub broswer to publish the first commit of the website and keep it public. When we changed the folder by using mkdocs build in the command line, we could now follow a couple more steps to change the website. Enter GitHub desktop. Select the current project (site). Look over changes. Add a summary of changes. Select \"Commit to main\". Select \"Push to origin\". After doing these, we could now enter GitHub browser mode to view the latest deployment of the website. Overall, this was a very long process, but it was very rewarding to get to see our website hosted and successful after the long time it took to set up!","title":"3. Using GitHub Pages"},{"location":"narrative/","text":"Digital Literacy Narrative","title":"Digital Literacy Narrative"},{"location":"narrative/#digital-literacy-narrative","text":"","title":"Digital Literacy Narrative"},{"location":"reflection/","text":"Course Reflection","title":"Course Reflection"},{"location":"reflection/#course-reflection","text":"","title":"Course Reflection"}]}